---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  vars_files:
    - vars/vars_demo.yml
    - vars/vars_demo_login.yml
  vars:
    parent_snapshot: "daily.0"
    svm_src: "{{ svm_1 }}-dr"
    svm_clone: "{{ svm_DR_clone }}"
    login: &login
      hostname: "{{ Cluster_B_IP }}"
      username: "{{ Cluster_B_username }}"
      password: "{{ Cluster_B_password }}"
      https: yes
      validate_certs: no
  tasks:
  - name: Create a new SVM
    na_ontap_svm:
      state: present
      name: "{{ svm_DR_clone }}"
      root_volume: "{{ svm_DR_clone_root }}"
      <<: *login

  - name: Setup DNS for the SVM
    na_ontap_dns:
      state: present
      vserver:  "{{ svm_DR_clone }}"
      domains: "{{ dns_domains }}"
      nameservers: "{{ dns_ips }}"
      skip_validation: true
      <<: *login

  - name: Create a new data LIF for the SVM
    na_ontap_interface:
      state: present
      vserver: "{{ svm_DR_clone }}"
      interface_name: "{{ svm_DR_clone_int_name }}"
      home_port: "{{ svm_DR_clone_int_home_port }}"
      home_node: "{{ svm_DR_clone_int_home_node }}"
      role: "{{ svm_DR_clone_int_role }}"
      protocols: "{{ svm_DR_clone_int_protocol }}"
      admin_status: up
      is_auto_revert: true
      address: "{{ svm_DR_clone_int_address }}"
      netmask: "{{ svm_DR_clone_int_netmask }}"
      #dns_domain_name: "{{ dns_domains[0] }}"
      <<: *login

  - name: "Join {{ svm_DR_clone }} to Active Directory as {{ svm_DR_clone }}"
    na_ontap_cifs_server:
      state: present
      service_state: started
      vserver: "{{ svm_DR_clone }}"
      name: "{{ svm_DR_clone }}"
      domain: "{{ AD }}"
      admin_user_name: "{{ AD_username }}"
      admin_password: "{{ AD_password }}"
      force: "yes"
      <<: *login

#####################################################
# Clone Volumes and Shares
#####################################################
  - name: Get Volumes and Shares list
    na_ontap_info:
      state: info
      <<: *login
      gather_subset:
        - volume_info
        - cifs_share_info
    register: ontap_info
  - debug:
      msg: "{{ ontap_info.ontap_info }}"

  - name: Clone Volume from "{{ svm_src }}" to "{{ svm_clone }}"
    na_ontap_command:
      <<: *login
      command: ['vol', 'clone', 'create -vserver {{ svm_clone }} -flexclone {{ item.value.volume_id_attributes.name }} -type RW -parent-vserver {{ svm_src }} -parent-volume {{ item.value.volume_id_attributes.name }} -parent-snapshot {{ parent_snapshot }} -junction-path /{{ item.value.volume_id_attributes.name }}']
      privilege: 'admin'
      return_dict: true
    with_dict: "{{ ontap_info.ontap_info.volume_info }}"
    when: item.value.volume_id_attributes.owning_vserver_name == svm_src and item.value.volume_state_attributes.is_vserver_root == "false"

  # - name: Clone Volume from {{ svm_src }} to {{ svm_clone }}
  #   na_ontap_volume_clone:
  #     state: present
  #     <<: *login
  #     vserver: "{{ svm_clone }}"
  #     parent_vserver: "{{ svm_src }}"
  #     parent_volume: "{{ item.value.volume_id_attributes.name }}"
  #     parent_snapshot: "daily.0"
  #     name: "{{ item.value.volume_id_attributes.name }}"
  #     space_reserve: none
  #     junction_path: "/Vol_Data"
  #     junction_path: "/{{ item.value.volume_id_attributes.name }}"
  #   with_dict: "{{ ontap_info.ontap_info.volume_info }}"
  #   when: item.value.volume_id_attributes.owning_vserver_name == svm_src and item.value.volume_state_attributes.is_vserver_root == "false"

  - name: Create CIFS shares from "{{ svm_src }}" to "{{ svm_clone }}"
    na_ontap_cifs:
      state: present
      share_name: "{{ item.value.share_name }}"
      path: "{{ item.value.path }}"
      vserver: "{{ svm_clone }}"
      share_properties: "{{ item.value.share_properties.cifs_share_properties }}"
      symlink_properties: read_only,enable
      <<: *login
    with_dict: "{{ ontap_info.ontap_info.cifs_share_info }}"
    when: item.value.vserver == svm_src and item.value.share_name != "c$" and item.value.share_name != "admin$" and item.value.share_name != "ipc$"

  - name: Set ACL for each share
    na_ontap_cifs_acl:
      state: present
      share_name: "{{ item.value.share_name }}"
      vserver: "{{ svm_clone }}"
      user_or_group: Everyone
      permission: full_control
      <<: *login
    with_dict: "{{ ontap_info.ontap_info.cifs_share_info }}"
    when: item.value.vserver == svm_src and item.value.share_name != "c$" and item.value.share_name != "admin$" and item.value.share_name != "ipc$"

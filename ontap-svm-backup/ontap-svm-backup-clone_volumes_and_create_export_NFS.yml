---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  vars_files:
    - vars/vars_clone_backup.yml
  vars_prompt:
    - name: vars_username
      prompt: "Insert NetApp Ontap cluster username:"
      private: no
      default: "admin"
    - name: vars_password
      prompt: "Insert NetApp Ontap cluster password:"
      default: "{{ vars_password }}"
  vars:
    parent_snapshot: "daily.0"
    login: &login
      hostname: "{{ vars_hostname }}"
      username: "{{ vars_username }}"
      password: "{{ vars_password }}"
      https: yes
      validate_certs: no
  tasks:
  - name: Get Volumes list
    na_ontap_info:
      state: info
      <<: *login
      gather_subset:
        - volume_info
    register: ontap_info
  - debug:
      msg: "{{ ontap_info.ontap_info }}"

  - name: Clone Volume from "{{ svm_src }}" to "{{ svm_clone }}"
    na_ontap_command:
      command: ['vol', 'clone', 'create -vserver {{ svm_clone }} -flexclone {{ item.value.volume_id_attributes.name }} -type RW -parent-vserver {{ svm_src }} -parent-volume {{ item.value.volume_id_attributes.name }} -parent-snapshot {{ parent_snapshot }} -junction-path /{{ item.value.volume_id_attributes.name }}']
      privilege: 'admin'
      <<: *login
      return_dict: true
    with_dict: "{{ ontap_info.ontap_info.volume_info }}"
    when: item.value.volume_id_attributes.owning_vserver_name == svm_src and item.value.volume_state_attributes.is_vserver_root == "false"

  - name: Assign Export Policy {{ clone_export_policy }} to cloned Volumes
    na_ontap_volume:
      state: present
      policy: "{{ clone_export_policy }}"
      name: "{{ item.value.volume_id_attributes.name }}"
      vserver: "{{ svm_clone }}"
      <<: *login
    with_dict: "{{ ontap_info.ontap_info.volume_info }}"
    when: item.value.volume_id_attributes.owning_vserver_name == svm_src and item.value.volume_state_attributes.is_vserver_root == "false"

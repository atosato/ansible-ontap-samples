---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  vars_files:
    - vars/vars_demo.yml
    - vars/vars_demo_login.yml
  vars:
    #snapMirrorPolicy: "MirrorAllSnapshotsDiscardNetwork"
    snapMirrorPolicy: "MirrorAndVault"
    login: &login
      hostname: "{{ Cluster_B_IP }}"
      username: "{{ Cluster_B_username }}"
      password: "{{ Cluster_B_password }}"
      https: yes
      validate_certs: no
  tasks:
    - name: Create a new SVM DR
      na_ontap_svm:
        state: present
        name: "{{ svm_1_DR_name }}"
        subtype: "dp_destination"
        <<: *login
      tags: always

    - name: Create vserver Peer
      na_ontap_vserver_peer:
        state: present
        peer_vserver: "{{ svm_1 }}"
        peer_cluster: "{{ Cluster_A_name }}"
        dest_hostname: "{{ Cluster_A_IP }}"
        vserver: "{{ svm_1_DR_name }}"
        applications: ["snapmirror"]
        <<: *login
      tags: always

    - name: Create vserver SnapMirror DR - PRESERVE IDENTITY
      na_ontap_snapmirror:
        state: present
        source_vserver: "{{ svm_1 }}"
        destination_vserver: "{{ svm_1_DR_name }}"
        identity_preserve: true
        policy: "{{ snapMirrorPolicy }}"
        #schedule: "5min"
        <<: *login
      tags: [never, preserve-identity]

    - name: Create vserver DR and Mirror - CHANGE IDENTITY
      block:
        - name: Create vserver DR and Mirror - CHANGE IDENTITY
          na_ontap_snapmirror:
            state: present
            source_endpoint: {cluster: "{{ Cluster_A_name }}", path: "{{ svm_1 }}:"}
            destination_endpoint: {cluster: "{{ Cluster_B_name }}", path: "{{ svm_1_DR_name }}:"}
            #identity_preserve: false
            relationship_state: active
            policy: "{{ snapMirrorPolicy }}"
            initialize: false
            use_rest: always
            #schedule: "5min"
            <<: *login
        - name: Create a new data LIF for the SVM
          na_ontap_interface:
            state: present
            vserver: "{{ svm_1_DR_name }}"
            interface_name: "{{ svm_1_DR_lif_name }}"
            home_port: "{{ svm_1_DR_lif_home_port }}"
            home_node: "{{ svm_1_DR_lif_home_node }}"
            role: "{{ svm_1_DR_lif_role }}"
            protocols: "{{ svm_1_DR_lif_protocol }}"
            admin_status: up
            is_auto_revert: true
            address: "{{ svm_1_DR_lif_address }}"
            netmask: "{{ svm_1_DR_lif_netmask }}"
            dns_domain_name: "{{ dns_domains[0] }}"
            #failover_scope: home_node_only
            #service_policy: default-data-files
            <<: *login
        - name: Start {{ svm_1_DR_name }}
          netapp.ontap.na_ontap_svm:
            state: present
            name: "{{ svm_1_DR_name }}"
            admin_state: running
            use_rest: always
            <<: *login
        - name: Setup DNS
          na_ontap_dns:
            state: present
            vserver:  "{{ svm_1_DR_name }}"
            domains: "{{ dns_domains }}"
            nameservers: "{{ dns_ips }}"
            #skip_validation: true
            use_rest: always
            <<: *login
#   This operation is not permitted on a SVM that is configured as the destination for SVM DR. (Starting from Ontap 9.11)
        - name: Join {{ svm_1_DR_name }} to Active Directory
          na_ontap_cifs_server:
            state: present
            service_state: started
            vserver: "{{ svm_1_DR_name }}"
            name: "{{ svm_1_DR_name }}"
            domain: "{{ AD }}"
            admin_user_name: "{{ AD_username }}"
            admin_password: "{{ AD_password }}"
            force: "yes"
            use_rest: always
            feature_flags:
              trace_apis: true # log api and response in the path - /tmp/ontap_apis.log
            <<: *login
      tags: change-identity

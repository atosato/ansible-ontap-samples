###########################
### WARNING: POSSIBLE DATA LOSS!!!!
### This Playbook will delete any Share and Volume in the specified svm_DR vserver.
###########################
---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  vars_files:
    - vars/vars_demo.yml
    - vars/vars_demo_login.yml
  vars:
    svm_DR: "{{ svm_1_DR_name }}"
    svm_clone: "{{ svm_DR_clone }}"
    login: &login
      hostname: "{{ Cluster_B_IP }}"
      username: "{{ Cluster_B_username }}"
      password: "{{ Cluster_B_password }}"
      https: yes
      validate_certs: no
  tasks:
  - name: Get ALL volumes and shares list
    na_ontap_info:
      state: info
      <<: *login
      gather_subset:
        - volume_info
        - cifs_server_info
        - cifs_share_info
    register: ontap_info
    tags: always
  - debug:
     msg: "{{ ontap_info.ontap_info }}"
    tags: [never, debug]

  # - name: Delete ALL CIFS shares in "{{ svm_DR }}"
  # # NOTE: The AD Unjoin task will remove all the shares so this task is useless. Kept for demo usage.
  #   na_ontap_cifs:
  #     state: absent
  #     share_name: "{{ item.value.share_name }}"
  #     vserver: "{{ svm_DR }}"
  #     <<: *login
  #   with_dict: "{{ ontap_info.ontap_info.cifs_share_info }}"
  #   when: item.value.vserver == svm_DR and item.value.share_name != "c$" and item.value.share_name != "admin$" and item.value.share_name != "ipc$"

  - name: Break SnapMirror
    na_ontap_snapmirror:
      state: present
      relationship_state: broken
      source_endpoint: {cluster: "{{ Cluster_A_name }}", path: "{{ svm_1 }}:"}
      destination_endpoint: {cluster: "{{ Cluster_B_name }}", path: "{{ svm_DR }}:"}
      feature_flags:
        trace_apis: true # log api and response in the path - /tmp/ontap_apis.log

      <<: *login

  - pause:
      seconds: 5

  - name: Remove SnapMirror relationship and DELETE SVM DR
    block:
      - name: Delete vserver SnapMirror DR relationship
        na_ontap_snapmirror:
          state: absent
          source_endpoint: {cluster: "{{ Cluster_A_name }}", svm: "{{ svm_1 }}", path: "{{ svm_1 }}:"}
          destination_endpoint: {cluster: "{{ Cluster_B_name }}", svm: "{{ svm_DR }}", path: "{{ svm_DR }}:"}
          relationship_info_only: True
          source_hostname: "{{ Cluster_A_IP }}"
          <<: *login

      - pause:
          seconds: 8

      - name: Delete vserver Peer
        na_ontap_vserver_peer:
          state: absent
          peer_vserver: "{{ svm_1 }}"
          peer_cluster: "{{ Cluster_A_IP }}"
          dest_hostname: "{{ Cluster_A_IP }}"
          vserver: "{{ svm_DR }}"
          applications: ["snapmirror"]
          <<: *login

      - name: Delete ALL Volumes
        na_ontap_volume:
          state: absent
          name: "{{ item.value.volume_id_attributes.name }}"
          vserver: "{{ svm_DR }}"
          <<: *login
        with_dict: "{{ ontap_info.ontap_info.volume_info }}"
        when: item.value.volume_id_attributes.owning_vserver_name == svm_DR and item.value.volume_state_attributes.is_vserver_root == "false"

      - name: "UNJOIN from Active Directory"
        na_ontap_cifs_server:
          state: absent
          vserver: "{{ svm_DR }}"
          name: "{{ svm_DR }}"
          domain: "{{ item.value.domain }}"
          #admin_user_name: "" #Force unjoin withouth a login
          #admin_password: ""
          admin_user_name: "{{ AD_username }}"
          admin_password: "{{ AD_password }}"
          force: "yes"
          <<: *login
        with_dict: "{{ ontap_info.ontap_info.cifs_server_info }}"

      - name: Delete SVM
        na_ontap_svm:
          state: absent
          name: "{{ svm_DR }}"
          <<: *login
    tags: mirror-broken
